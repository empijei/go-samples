package l

import (
	"fmt"
	"log"
	"os"
)

//TODO implement file logging

// Curlevel represents the level of logging below which no log will be printed.
// The maximum available is LeveL_Failure, which will only print critical errors.
// The default is the lowest one, Level_Debug, which will print everything.
// The higher the loglevel, the lower the verbosity
var CurLevel LogLevel

//Do not print date, but print file name and line
var Flags = log.Lshortfile | log.Ltime

var std = log.New(os.Stderr, "", Flags)

var Color bool = true

func Log(level LogLevel, params ...interface{}) {
	if level < CurLevel {
		return
	}
	params = append([]interface{}{level.ShortString(Color) + ": "}, params...)
	// 3 Is the call depth to print the correct filename
	_ = std.Output(3, fmt.Sprint(params...))
}

func Logf(level LogLevel, format string, params ...interface{}) {
	if level < CurLevel {
		return
	}
	// 3 Is the call depth to print the correct filename
	_ = std.Output(3, fmt.Sprintf(level.ShortString(Color)+": "+format, params...))
}

func SetFlags(flag int) {
	std.SetFlags(flag)
}

// Failure behaves as all other logging functions, then panics with the given parameters
func Failure(params ...interface{}) {
	Log(Level_Failure, params...)
	panic(fmt.Sprint(params))
}

// Failuref behaves as all other logging functions, then panics with the given parameters
func Failuref(format string, params ...interface{}) {
	Logf(Level_Failure, format, params...)
	panic(fmt.Sprintf(format, params...))
}

//The code below is autogenerated

/*
for level in Debug Info Warn Error
do
sed "s/LEVEL/$level/g" <<TMPL
func LEVEL(params ...interface{}) { Log(Level_LEVEL, params...) }
func LEVELf(format string, params ...interface{}) { Logf(Level_LEVEL, format, params...) }
TMPL
done
*/

func Debug(params ...interface{})                 { Log(Level_Debug, params...) }
func Debugf(format string, params ...interface{}) { Logf(Level_Debug, format, params...) }
func Info(params ...interface{})                  { Log(Level_Info, params...) }
func Infof(format string, params ...interface{})  { Logf(Level_Info, format, params...) }
func Warn(params ...interface{})                  { Log(Level_Warn, params...) }
func Warnf(format string, params ...interface{})  { Logf(Level_Warn, format, params...) }
func Error(params ...interface{})                 { Log(Level_Error, params...) }
func Errorf(format string, params ...interface{}) { Logf(Level_Error, format, params...) }
